apply plugin: 'com.android.library'
apply plugin: 'com.ydq.android.gradle.native-aar.export' // must go after android gradle plugin

android {
    compileSdkVersion 28

    defaultConfig {
        minSdkVersion 21
        targetSdkVersion 28
        versionCode 1
        versionName "1.0"

        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"

        externalNativeBuild {
            cmake {
                targets "utki"
            }
        }
    }

    // This is needed to make the default dependency configuration to be 'debug' for the test app which references
    // this module as in-project dependency. Because app searches for library to link against in debug directory.
    defaultPublishConfig "debug"

    nativeBundleExport {
        headerDir = "${project.projectDir}/../../src/"
        bundleStatic = true
        includeHeaderFilter.add("**/*.hpp")
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }

    // Encapsulates your external native build configurations.
    externalNativeBuild {
        // Encapsulates your CMake build configurations.
        cmake {
            // Provides a relative path to your CMake build script.
            path "CMakeLists.txt"
        }
    }
}

dependencies {

}



//=================================
//=== pack library files to aar ===
//This stuff re-packs the release AAR file adding headers and static libs to there, but removing all shared (.so) libs, as we don't need them. The resulting AAR is put to the project root directory and can be uploaded to Maven along with POM file (you need to write one by hand).

def aarName = name

task copyNdkLibsToAAR(type: Zip) {
    baseName = aarName
    version = "\$(version)"
    extension = 'aar.in'
    destinationDir = file('..') //put resulting AAR file to upper level directory

    from zipTree("build/outputs/aar/" + aarName + "-release.aar")
    exclude('**/*.so') //do not include shared libraries into final AAR
    from("../../src") {
        include('**/*.hpp')
        include('**/*.h')
        into('ndkLibs/include')
    }
    from("build/intermediates/cmake/debug/obj"){
        include('**/*.a')
        into('ndkLibs')
    }
}

afterEvaluate {
    bundleReleaseAar.finalizedBy copyNdkLibsToAAR
}
