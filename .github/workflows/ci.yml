name: ci
on: [push, pull_request]
env:
  PACKAGE_NAME: ${{ github.event.repository.name }}
  MYCI_BINTRAY_API_KEY: ${{ secrets.MYCI_BINTRAY_API_KEY }}
  MYCI_GIT_USERNAME: igagis
  MYCI_GIT_ACCESS_TOKEN: ${{ secrets.MYCI_GIT_ACCESS_TOKEN }}
jobs:
##### linux #####
  linux:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        include:
          - {os: debian, os_rel: buster, image_owner: , package_type: deb}
          - {os: debian, os_rel: buster, image_owner: i386/, package_type: deb}
          - {os: ubuntu, os_rel: bionic, image_owner: , package_type: deb}
          - {os: ubuntu, os_rel: eoan, image_owner: , package_type: deb}
          - {os: raspbian, os_rel: buster, image_owner: igagis/, package_type: deb}
    container: ${{ matrix.image_owner }}${{ matrix.os }}:${{ matrix.os_rel }}
    steps:
      - name: git clone
        uses: actions/checkout@main
      - name: add igagis deb repo
        uses: myci-actions/add-deb-repo@2
        with:
          repo: deb http://dl.bintray.com/igagis/debian buster main
          repo-name: igagis
          keys: 379CE192D401AB61
      - name: install ci tools
        run: apt install --assume-yes devscripts equivs myci
      - name: prepare debian package
        run: myci-deb-prepare.sh
      - name: install deps
        run: myci-deb-install-build-deps.sh
      - name: build
        run: autojobs=true dpkg-buildpackage -us -uc
      - name: deploy deb packages
        run: myci-deploy-debian-bintray.sh -u igagis -r ${{ matrix.os }} -p $PACKAGE_NAME -c main -d ${{ matrix.os_rel }} ../*.deb
        if: matrix.package_type == 'deb' && startsWith(github.ref, 'refs/tags/')
##### macosx #####
  macosx:
    runs-on: macos-latest
    steps:
    - name: git clone
      uses: actions/checkout@main
    - name: add igagis tap
      run: brew tap igagis/tap && brew update
    - name: install ci tools
      run: brew install myci
    - name: install deps
      run: myci-brew-install.sh `myci-list-deps-homebrew.sh`
    - name: build
      run: make autojobs=true
    - name: test
      run: make test autojobs=true
    - name: deploy
      run: myci-deploy-homebrew.sh -t igagis/tap
      # if: startsWith(github.ref, 'refs/tags/')
##### ios #####
  ios:
    runs-on: macos-latest
    steps:
    - name: add igagis tap
      run: brew tap igagis/tap && brew update
    - name: install ci tools
      run: brew install myci
    - name: git clone
      uses: actions/checkout@main
    - name: set PACKAGE_VERSION
      uses: myci-actions/export-env-var@master
      with:
        name: PACKAGE_VERSION
        value: $(myci-deb-version.sh debian/changelog)
    - name: add cocoapods repo
      run: pod repo add --silent igagis https://${MYCI_GIT_USERNAME}:${MYCI_GIT_ACCESS_TOKEN}@github.com/igagis/cocoapods-repo.git
    - name: install deps
      run: pod install --project-directory=xcode
    - name: add sources to xcode project
      run: |
        curl -L https://github.com/zackslash/Xcode-Proj-Adder/raw/master/bin/XcodeProjAdder -O
        chmod +x XcodeProjAdder
        (cd xcode/$PACKAGE_NAME && ../../XcodeProjAdder -XCP $PACKAGE_NAME.xcodeproj -SCSV `echo $(find ../../src -type f -name *.cpp) | sed -E -e 's/ /,/g'`)
    - name: build
      run: xcodebuild -workspace xcode/$PACKAGE_NAME.xcworkspace -scheme $PACKAGE_NAME CONFIGURATION_BUILD_DIR=../build -configuration Release
    - name: create package
      run: myci-create-zip-package.sh -h src -f xcode/build/lib$PACKAGE_NAME.a///lib/ios -f LICENSE $PACKAGE_NAME-$PACKAGE_VERSION.zip
    - name: deploy
      run: myci-deploy-cocoapods.sh -r igagis -v $PACKAGE_VERSION -u igagis -b cocoapods -p $PACKAGE_NAME-$PACKAGE_VERSION.zip cocoapods/$PACKAGE_NAME.podspec.in
      # if: startsWith(github.ref, 'refs/tags/')
##### msys2 #####
  windows-msys2:
    runs-on: windows-latest
    defaults:
      run:
        shell: bash
    env:
      msys2: c:\msys64\msys2_shell.cmd -defterm -no-start -msys -here -c
    steps:
    - name: git clone
      uses: actions/checkout@main
    - name: add igagis pacman repo
      run: |
        $msys2 "echo -e '[igagis_msys]\\nSigLevel = Optional TrustAll\\nServer = https://dl.bintray.com/igagis/msys2/msys' >> /etc/pacman.conf" &&
        $msys2 "echo -e '[igagis_mingw64]\\nSigLevel = Optional TrustAll\\nServer = https://dl.bintray.com/igagis/msys2/mingw64' >> /etc/pacman.conf" &&
        $msys2 "echo -e '[igagis_mingw32]\\nSigLevel = Optional TrustAll\\nServer = https://dl.bintray.com/igagis/msys2/mingw32' >> /etc/pacman.conf"
    - name: install ci tools
      run: $msys2 "pacman -Sy --noconfirm myci msys2-devel mingw-w64-x86_64-toolchain mingw-w64-i686-toolchain"
    - name: prepare pacman package
      run: $msys2 "myci-apply-version.sh -v \$(myci-deb-version.sh debian/changelog) msys2/PKGBUILD.in";
    - name: build
      run: $msys2 "(cd msys2 && PKGEXT='.pkg.tar.xz' autojobs=true makepkg-mingw --syncdeps --noconfirm --skipinteg)"
    # - name: deploy
    #   run: TODO:
    #   if: startsWith(github.ref, 'refs/tags/')
##### msvs #####
  windows-msvs:
    runs-on: windows-latest
    defaults:
      run:
        shell: powershell
    steps:
    - name: git clone
      uses: actions/checkout@main
    - name: install CoAPP tools
      uses: myci-actions/install-coapp-tools@master
    - name: nuget update
      run: |
        nuget restore msvs_solution/msvs_solution.sln
        nuget update msvs_solution/msvs_solution.sln
    - name: add msbuild to PATH
      uses: microsoft/setup-msbuild@v1.0.2
    - name: build
      run: .\nuget\build_nuget.ps1
    - name: deploy
      uses: myci-actions/publish-nuget@master
      with:
        filename: '.\nuget\*.nupkg'
        api-key: ${{ secrets.NUGET_DOT_ORG_API_KEY }}
      if: startsWith(github.ref, 'refs/tags/')
